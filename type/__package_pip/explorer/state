#!/bin/sh -e
#
# 2022 Dennis Camera (cdist at dtnr.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

comma_join() { sed -e :a -e '$!N' -e 's/\n/,/' -e ta; }
first_arg() { printf '%s\n' "$1"; }
shebang_of() { sed -n -e '1s/^#! *//p' "$1"; }

pip=$("${__type_explorer:?}/pip")

if test -z "${pip}"
then
	# no pip, no packages
	echo absent
	exit
elif test -x "${pip}"
then
	# we have a pip executable -> extract python interpreter
	pyinterp=$(shebang_of "${pip}")
else
	pyinterp=$(expr "${pip}" : '\(.*\)-m *pip')
fi
test -n "${pyinterp}" || {
	printf 'Could not determine the matching Python interpreter for %s\n' \
		"${pip}" >&2
	exit 1
}

# Execute the matching Python interpreter of pip.
# shellcheck disable=SC2120
pip_python() { eval "set -- \"${pyinterp}\" \"\$@"\"; "$@"; }

REQUIREMENT=$("${__type_explorer:?}/requirement")
export REQUIREMENT

pip_python <<CODE
import pkg_resources
import os
import sys


def check_requirement(r):
    try:
        pkg_resources.require(requirement)
        return "present"
    except pkg_resources.DistributionNotFound:
        return "absent"


def println(line, file):
    file.write(line + "\n")


requirement = os.environ["REQUIREMENT"]

try:
    println(check_requirement(requirement), sys.stdout)
except pkg_resources.RequirementParseError:
    # requirement is probably an URL, fall back to __object_id
    requirement = os.environ["__object_id"]
    println(check_requirement(requirement), sys.stdout)

except pkg_resources.UnknownExtra as e:
    # unknown extras are not acceptable
    println(str(e), sys.stderr)
    sys.exit(1)
CODE
